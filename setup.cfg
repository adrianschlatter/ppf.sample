[metadata]
name = sampleproject
# Versions should comply with PEP440.  For a discussion on single-sourcing
# the version across setup.py and the project code, see
# https://packaging.python.org/en/latest/single_source_version.html
version = 2.0.1
description = A sample Python project
long_description = file: README.md
long_description_content_type = text/markdown

# The projects main homepage.
url = https://github.com/pypa/sampleproject
project_urls =
    Bug Reports = https://github.com/pypa/sampleproject/issues
    Funding = https://donate.pypi.org
    Say Thanks! = http://saythanks.io/to/example
    Source = https://github.com/pypa/sampleproject/

# Author details
author = Adrian Schlatter
# Do *not* provide author_email here. Instead, provide email for
# software / licensing / ... questions (centrally) on GitHub.
# If email changes (e.g. discard because of too much spam),
# adjust email in single place instead of in every package.
# author_email = private@private.pr

# Choose your license
license = Revised BSD
license_files = LICENSE.txt

# See https://pypi.python.org/pypi?%3Aaction=list_classifiers
classifiers =
    # How mature is this project? Common values are
    #   3 - Alpha
    #   4 - Beta
    #   5 - Production/Stable
    Development Status :: 3 - Alpha
    # Indicate who your project is intended for
    Intended Audience :: Developers
    Intended Audience :: Manufacturing
    Intended Audience :: Information Technology
    Topic :: Utilities
    # Pick your license as you wish (should match "license" above)
    License :: OSI Approved :: BSD License
    # Specify the Python versions you support here. In particular, ensure
    # that you indicate whether you support Python 2, Python 3 or both.
    Programming Language :: Python :: 3
    Operating System :: OS Independent

# What does your project relate to?
keywords = sample, setuptools, development

[options]
# You can just specify the packages manually here if your project is
# simple. Or you can use find_packages().
package_dir = 
    = src
packages = find:
include_package_data = True

# List run-time dependencies here.  These will be installed by pip when
# your project is installed. For an analysis of "install_requires" vs pips
# requirements files see:
# https://packaging.python.org/en/latest/requirements.html
install_requires = numpy; plumbum
python_requires = >=3.6, <4

[options.packages.find]
where = src

[options.extras_require]
# List additional groups of dependencies here (e.g. development
# dependencies). You can install these using the following syntax,
# for example:
# $ pip install -e .[dev,test]
dev = check-manifest
test = pytest; twine; check-manifest; readme_renderer; flake8; coverage

[options.package_data]
sample = package_data.dat

[options.data_files]
# Although 'package_data' is the preferred approach, in some case you may
# need to place data files outside of your packages. See:
# http://docs.python.org/distutils/setupscript.html#installing-additional-files
#
# In this case, 'data_file' will be installed into '<sys.prefix>/my_data'
my_data = data/data_file

[options.entry_points]
console_scripts =
    cmdlinetool = sample.cli:main
